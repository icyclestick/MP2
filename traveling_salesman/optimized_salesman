import sys
from itertools import combinations

def held_karp_tsp(distances):
    n = len(distances)
    
    dist = [[0]*n for _ in range(n)]
    for i in range(n):
        for j in range(n):
            dist[i][j] = distances[i][j]
    
    memo = {}
    
    for k in range(1, n):
        memo[(1 << k, k)] = (dist[0][k], [0, k])
    
    for subset_size in range(2, n):
        new_memo = {}
        
        for subset in get_subsets(n, subset_size):
            for k in [i for i in range(1, n) if (subset & (1 << i))]:
                prev_subset = subset & ~(1 << k)
                
                min_dist = float('inf')
                best_path = []
                
                for m in [i for i in range(1, n) if (prev_subset & (1 << i)) or (prev_subset == 0 and i == 0)]:
                    if (prev_subset, m) in memo:
                        curr_dist = memo[(prev_subset, m)][0] + dist[m][k]
                        if curr_dist < min_dist:
                            min_dist = curr_dist
                            best_path = memo[(prev_subset, m)][1] + [k]
                
                if min_dist != float('inf'):
                    new_memo[(subset, k)] = (min_dist, best_path)
        
        memo.update(new_memo)
    
    full_subset = (1 << n) - 2
    min_dist = float('inf')
    best_path = []
    
    for k in range(1, n):
        if (full_subset, k) in memo:
            curr_dist = memo[(full_subset, k)][0] + dist[k][0]
            if curr_dist < min_dist:
                min_dist = curr_dist
                best_path = memo[(full_subset, k)][1] + [0]
    
    return best_path, min_dist

def get_subsets(n, size):
    cities = range(1, n)
    for combo in combinations(cities, size):
        subset = 0
        for city in combo:
            subset |= (1 << city)
        yield subset

distances = [
    [0, 2, 2, 5, 9, 3],
    [2, 0, 4, 6, 7, 8],
    [2, 4, 0, 8, 6, 3],
    [5, 6, 8, 0, 4, 9],
    [9, 7, 6, 4, 0, 10],
    [3, 8, 3, 9, 10, 0]
]

route, total_distance = held_karp_tsp(distances)
print("Optimized Route:", route)
print("Total Distance:", total_distance)